/*
 *   This file was generated by a tool.
 *   Do not edit it, otherwise the changes will be overwritten.
 */

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.IO;
using Rain.Core;
using UnityEngine.Scripting;

namespace Rain.F8ExcelDataClass
{
	public class F8DataManager : ModuleSingleton<F8DataManager>, IModule
	{
		private Sheet1 p_Sheet1;
		private Sheet2 p_Sheet2;
		private LocalizedStrings p_LocalizedStrings;

		[Preserve]
		public Sheet1Item GetSheet1ByID(System.Int32 id)
		{
			Sheet1Item t = null;
			p_Sheet1.Dict.TryGetValue(id, out t);
			if (t == null) RLog.LogError("找不到id： " + id + " ，配置表： Sheet1");
			return t;
		}

		[Preserve]
		public Dictionary<System.Int32, Sheet1Item> GetSheet1()
		{
			return p_Sheet1.Dict;
		}

		[Preserve]
		public Sheet2Item GetSheet2ByID(System.Int32 id)
		{
			Sheet2Item t = null;
			p_Sheet2.Dict.TryGetValue(id, out t);
			if (t == null) RLog.LogError("找不到id： " + id + " ，配置表： Sheet2");
			return t;
		}

		[Preserve]
		public Dictionary<System.Int32, Sheet2Item> GetSheet2()
		{
			return p_Sheet2.Dict;
		}

		[Preserve]
		public LocalizedStringsItem GetLocalizedStringsByID(System.Int32 id)
		{
			LocalizedStringsItem t = null;
			p_LocalizedStrings.Dict.TryGetValue(id, out t);
			if (t == null) RLog.LogError("找不到id： " + id + " ，配置表： LocalizedStrings");
			return t;
		}

		[Preserve]
		public Dictionary<System.Int32, LocalizedStringsItem> GetLocalizedStrings()
		{
			return p_LocalizedStrings.Dict;
		}

		[Preserve]
		public void LoadLocalizedStrings()
		{
			p_LocalizedStrings = Load<LocalizedStrings>("LocalizedStrings") as LocalizedStrings;
		}

		[Preserve]
		public void LoadLocalizedStringsCallback(Action onLoadComplete)
		{
			Util.Unity.StartCoroutine(LoadLocalizedStringsIEnumerator(onLoadComplete));
		}

		[Preserve]
		public IEnumerator LoadLocalizedStringsIEnumerator(Action onLoadComplete = null)
		{
			yield return LoadAsync<LocalizedStrings>("LocalizedStrings", result => p_LocalizedStrings = result as LocalizedStrings);
			onLoadComplete?.Invoke();
		}

		[Preserve]
		public void LoadAll()
		{
			p_Sheet1 = Load<Sheet1>("Sheet1") as Sheet1;
			p_Sheet2 = Load<Sheet2>("Sheet2") as Sheet2;
			p_LocalizedStrings = Load<LocalizedStrings>("LocalizedStrings") as LocalizedStrings;
		}

		[Preserve]
		public void RuntimeLoadAll(Dictionary<String, System.Object> objs)
		{
			p_Sheet1 = objs["Sheet1"] as Sheet1;
			p_Sheet2 = objs["Sheet2"] as Sheet2;
			p_LocalizedStrings = objs["LocalizedStrings"] as LocalizedStrings;
		}

		[Preserve]
		public IEnumerable LoadAllAsync()
		{
			yield return LoadAsync<Sheet1>("Sheet1", result => p_Sheet1 = result as Sheet1);
			yield return LoadAsync<Sheet2>("Sheet2", result => p_Sheet2 = result as Sheet2);
			yield return LoadAsync<LocalizedStrings>("LocalizedStrings", result => p_LocalizedStrings = result as LocalizedStrings);
		}

		[Preserve]
		public void LoadAllAsyncCallback(Action onLoadComplete = null)
		{
			Util.Unity.StartCoroutine(LoadAllAsyncIEnumerator(onLoadComplete));
		}

		[Preserve]
		public IEnumerator LoadAllAsyncIEnumerator(Action onLoadComplete = null)
		{
			yield return LoadAsync<Sheet1>("Sheet1", result => p_Sheet1 = result as Sheet1);
			yield return LoadAsync<Sheet2>("Sheet2", result => p_Sheet2 = result as Sheet2);
			yield return LoadAsync<LocalizedStrings>("LocalizedStrings", result => p_LocalizedStrings = result as LocalizedStrings);
			onLoadComplete?.Invoke();
		}

		[Preserve]
		public T Load<T>(string name)
		{
			TextAsset textAsset = AssetManager.Ins.Load<TextAsset>(name);
			if (textAsset == null)
			{
				return default(T);
			}
			AssetManager.Ins.Unload(name, false);
			T obj = Util.LitJson.ToObject<T>(textAsset.text);
			return obj;
		}

		[Preserve]
		public IEnumerator LoadAsync<T>(string name, Action<T> callback)
		{
			var load = AssetManager.Ins.LoadAsyncCoroutine<TextAsset>(name);
			yield return load;
			TextAsset textAsset = AssetManager.Ins.GetAssetObject<TextAsset>(name);
			if (textAsset != null)
			{
				AssetManager.Ins.Unload(name, false);
				T obj = Util.LitJson.ToObject<T>(textAsset.text);
				callback(obj);
			}
		}

		public void OnInit(object createParam)
		{
			
		}

		public void OnUpdate()
		{
			
		}

		public void OnLateUpdate()
		{
			
		}

		public void OnFixedUpdate()
		{
			
		}

		public void OnTermination()
		{
			base.Destroy();
		}
	}
}
