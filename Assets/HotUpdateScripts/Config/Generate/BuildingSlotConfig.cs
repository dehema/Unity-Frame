
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace Rain.Core
{
public sealed partial class BuildingSlotConfig : Luban.BeanBase
{
    public BuildingSlotConfig(JSONNode _buf) 
    {
        { if(!_buf["SlotID"].IsNumber) { throw new SerializationException(); }  SlotID = _buf["SlotID"]; }
        { if(!_buf["posX"].IsNumber) { throw new SerializationException(); }  PosX = _buf["posX"]; }
        { if(!_buf["posY"].IsNumber) { throw new SerializationException(); }  PosY = _buf["posY"]; }
        { if(!_buf["posZ"].IsNumber) { throw new SerializationException(); }  PosZ = _buf["posZ"]; }
        { if(!_buf["rotY"].IsNumber) { throw new SerializationException(); }  RotY = _buf["rotY"]; }
        { if(!_buf["IsLocked"].IsBoolean) { throw new SerializationException(); }  IsLocked = _buf["IsLocked"]; }
        { var __json0 = _buf["UnlockCondition"]; if(!__json0.IsArray) { throw new SerializationException(); } UnlockCondition = new System.Collections.Generic.Dictionary<CityBuildingType, int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { CityBuildingType _k0;  { if(!__e0[0].IsNumber) { throw new SerializationException(); }  _k0 = (CityBuildingType)__e0[0].AsInt; } int _v0;  { if(!__e0[1].IsNumber) { throw new SerializationException(); }  _v0 = __e0[1]; }  UnlockCondition.Add(_k0, _v0); }   }
        { if(!_buf["buildingType"].IsNumber) { throw new SerializationException(); }  BuildingType = (CityBuildingType)_buf["buildingType"].AsInt; }
    }

    public static BuildingSlotConfig DeserializeBuildingSlotConfig(JSONNode _buf)
    {
        return new BuildingSlotConfig(_buf);
    }

    /// <summary>
    /// 建筑槽
    /// </summary>
    public readonly int SlotID;
    /// <summary>
    /// 坐标
    /// </summary>
    public readonly float PosX;
    /// <summary>
    /// 坐标
    /// </summary>
    public readonly float PosY;
    /// <summary>
    /// 坐标
    /// </summary>
    public readonly float PosZ;
    /// <summary>
    /// 角度
    /// </summary>
    public readonly float RotY;
    /// <summary>
    /// 锁定
    /// </summary>
    public readonly bool IsLocked;
    /// <summary>
    /// 解锁
    /// </summary>
    public readonly System.Collections.Generic.Dictionary<CityBuildingType, int> UnlockCondition;
    /// <summary>
    /// 建筑类型
    /// </summary>
    public readonly CityBuildingType BuildingType;
   
    public const int __ID__ = 2040872148;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "SlotID:" + SlotID + ","
        + "posX:" + PosX + ","
        + "posY:" + PosY + ","
        + "posZ:" + PosZ + ","
        + "rotY:" + RotY + ","
        + "IsLocked:" + IsLocked + ","
        + "UnlockCondition:" + Luban.StringUtil.CollectionToString(UnlockCondition) + ","
        + "buildingType:" + BuildingType + ","
        + "}";
    }
}
}

