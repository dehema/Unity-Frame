
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace Rain.Core
{
public sealed partial class ItemConfig : Luban.BeanBase
{
    public ItemConfig(JSONNode _buf) 
    {
        { if(!_buf["ItemID"].IsString) { throw new SerializationException(); }  ItemID = _buf["ItemID"]; }
        { if(!_buf["ItemName"].IsString) { throw new SerializationException(); }  ItemName = _buf["ItemName"]; }
        { if(!_buf["ItemType"].IsNumber) { throw new SerializationException(); }  ItemType = (ItemType)_buf["ItemType"].AsInt; }
        { if(!_buf["ItemSubType"].IsNumber) { throw new SerializationException(); }  ItemSubType = _buf["ItemSubType"]; }
        { if(!_buf["StackLimit"].IsNumber) { throw new SerializationException(); }  StackLimit = _buf["StackLimit"]; }
        { if(!_buf["ItemDescription"].IsString) { throw new SerializationException(); }  ItemDescription = _buf["ItemDescription"]; }
        { if(!_buf["IconName"].IsString) { throw new SerializationException(); }  IconName = _buf["IconName"]; }
        { var __json0 = _buf["GetWays"]; if(!__json0.IsArray) { throw new SerializationException(); } GetWays = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  GetWays.Add(__v0); }   }
        { if(!_buf["SellPrice"].IsNumber) { throw new SerializationException(); }  SellPrice = _buf["SellPrice"]; }
        { if(!_buf["IsConsumable"].IsBoolean) { throw new SerializationException(); }  IsConsumable = _buf["IsConsumable"]; }
        { if(!_buf["Quality"].IsNumber) { throw new SerializationException(); }  Quality = _buf["Quality"]; }
        { if(!_buf["param"].IsNumber) { throw new SerializationException(); }  Param = _buf["param"]; }
    }

    public static ItemConfig DeserializeItemConfig(JSONNode _buf)
    {
        return new ItemConfig(_buf);
    }

    /// <summary>
    /// 物品 ID
    /// </summary>
    public readonly string ItemID;
    /// <summary>
    /// 物品名称
    /// </summary>
    public readonly string ItemName;
    /// <summary>
    /// 物品类型
    /// </summary>
    public readonly ItemType ItemType;
    /// <summary>
    /// 物品子类型
    /// </summary>
    public readonly int ItemSubType;
    /// <summary>
    /// 堆叠上限
    /// </summary>
    public readonly int StackLimit;
    /// <summary>
    /// 物品描述
    /// </summary>
    public readonly string ItemDescription;
    /// <summary>
    /// 图标路径
    /// </summary>
    public readonly string IconName;
    /// <summary>
    /// 获取途径
    /// </summary>
    public readonly System.Collections.Generic.List<int> GetWays;
    /// <summary>
    /// 出售价格
    /// </summary>
    public readonly int SellPrice;
    /// <summary>
    /// 是否可消耗
    /// </summary>
    public readonly bool IsConsumable;
    /// <summary>
    /// 物品品质
    /// </summary>
    public readonly int Quality;
    /// <summary>
    /// 参数
    /// </summary>
    public readonly int Param;
   
    public const int __ID__ = -764023723;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "ItemID:" + ItemID + ","
        + "ItemName:" + ItemName + ","
        + "ItemType:" + ItemType + ","
        + "ItemSubType:" + ItemSubType + ","
        + "StackLimit:" + StackLimit + ","
        + "ItemDescription:" + ItemDescription + ","
        + "IconName:" + IconName + ","
        + "GetWays:" + Luban.StringUtil.CollectionToString(GetWays) + ","
        + "SellPrice:" + SellPrice + ","
        + "IsConsumable:" + IsConsumable + ","
        + "Quality:" + Quality + ","
        + "param:" + Param + ","
        + "}";
    }
}
}

