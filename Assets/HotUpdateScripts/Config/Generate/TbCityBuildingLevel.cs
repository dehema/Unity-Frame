
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace Rain.Core
{
/// <summary>
/// 建筑层级
/// </summary>
public partial class TbCityBuildingLevel
{
    private readonly System.Collections.Generic.List<CityBuildingLevelConfig> _dataList;

    private System.Collections.Generic.Dictionary<(CityBuildingType, int), CityBuildingLevelConfig> _dataMapUnion;

    public TbCityBuildingLevel(JSONNode _buf)
    {
        _dataList = new System.Collections.Generic.List<CityBuildingLevelConfig>();
        
        foreach(JSONNode _ele in _buf.Children)
        {
            CityBuildingLevelConfig _v;
            { if(!_ele.IsObject) { throw new SerializationException(); }  _v = global::Rain.Core.CityBuildingLevelConfig.DeserializeCityBuildingLevelConfig(_ele);  }
            _dataList.Add(_v);
        }
        _dataMapUnion = new System.Collections.Generic.Dictionary<(CityBuildingType, int), CityBuildingLevelConfig>();
        foreach(var _v in _dataList)
        {
            _dataMapUnion.Add((_v.BuildingType, _v.Level), _v);
        }
    }

    public System.Collections.Generic.List<CityBuildingLevelConfig> DataList => _dataList;

    public CityBuildingLevelConfig Get(CityBuildingType buildingType, int level) => _dataMapUnion.TryGetValue((buildingType, level), out CityBuildingLevelConfig __v) ? __v : null;
    
    public void ResolveRef(Tables tables)
    {
        foreach(var _v in _dataList)
        {
            _v.ResolveRef(tables);
        }
    }
}

}

